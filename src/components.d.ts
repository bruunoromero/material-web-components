/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface MwcAppBarRow {

    }
  }

  interface HTMLMwcAppBarRowElement extends StencilComponents.MwcAppBarRow, HTMLStencilElement {}

  var HTMLMwcAppBarRowElement: {
    prototype: HTMLMwcAppBarRowElement;
    new (): HTMLMwcAppBarRowElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-app-bar-row': HTMLMwcAppBarRowElement;
  }
  interface ElementTagNameMap {
    'mwc-app-bar-row': HTMLMwcAppBarRowElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-app-bar-row': JSXElements.MwcAppBarRowAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcAppBarRowAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcAppBarSection {
      'alignEnd': boolean;
      'alignStart': boolean;
    }
  }

  interface HTMLMwcAppBarSectionElement extends StencilComponents.MwcAppBarSection, HTMLStencilElement {}

  var HTMLMwcAppBarSectionElement: {
    prototype: HTMLMwcAppBarSectionElement;
    new (): HTMLMwcAppBarSectionElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-app-bar-section': HTMLMwcAppBarSectionElement;
  }
  interface ElementTagNameMap {
    'mwc-app-bar-section': HTMLMwcAppBarSectionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-app-bar-section': JSXElements.MwcAppBarSectionAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcAppBarSectionAttributes extends HTMLAttributes {
      'alignEnd'?: boolean;
      'alignStart'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcAppBarTitle {

    }
  }

  interface HTMLMwcAppBarTitleElement extends StencilComponents.MwcAppBarTitle, HTMLStencilElement {}

  var HTMLMwcAppBarTitleElement: {
    prototype: HTMLMwcAppBarTitleElement;
    new (): HTMLMwcAppBarTitleElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-app-bar-title': HTMLMwcAppBarTitleElement;
  }
  interface ElementTagNameMap {
    'mwc-app-bar-title': HTMLMwcAppBarTitleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-app-bar-title': JSXElements.MwcAppBarTitleAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcAppBarTitleAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcAppBar {
      'fixed': boolean;
      'prominent': boolean;
      'short': boolean;
      'shortCollapsed': boolean;
    }
  }

  interface HTMLMwcAppBarElement extends StencilComponents.MwcAppBar, HTMLStencilElement {}

  var HTMLMwcAppBarElement: {
    prototype: HTMLMwcAppBarElement;
    new (): HTMLMwcAppBarElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-app-bar': HTMLMwcAppBarElement;
  }
  interface ElementTagNameMap {
    'mwc-app-bar': HTMLMwcAppBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-app-bar': JSXElements.MwcAppBarAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcAppBarAttributes extends HTMLAttributes {
      'fixed'?: boolean;
      'prominent'?: boolean;
      'short'?: boolean;
      'shortCollapsed'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcApp {
      'background': string;
      'onPrimary': string;
      'onSecondary': string;
      'onSurface': string;
      'primary': string;
      'secondary': string;
      'surface': string;
      'textIconOnBackground': string;
    }
  }

  interface HTMLMwcAppElement extends StencilComponents.MwcApp, HTMLStencilElement {}

  var HTMLMwcAppElement: {
    prototype: HTMLMwcAppElement;
    new (): HTMLMwcAppElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-app': HTMLMwcAppElement;
  }
  interface ElementTagNameMap {
    'mwc-app': HTMLMwcAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-app': JSXElements.MwcAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcAppAttributes extends HTMLAttributes {
      'background'?: string;
      'onPrimary'?: string;
      'onSecondary'?: string;
      'onSurface'?: string;
      'primary'?: string;
      'secondary'?: string;
      'surface'?: string;
      'textIconOnBackground'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcButton {
      'dense': boolean;
      'disabled': boolean;
      'href': string;
      'outlined': boolean;
      'raised': boolean;
      'ripple': boolean;
      'tag': string;
      'unelevated': boolean;
    }
  }

  interface HTMLMwcButtonElement extends StencilComponents.MwcButton, HTMLStencilElement {}

  var HTMLMwcButtonElement: {
    prototype: HTMLMwcButtonElement;
    new (): HTMLMwcButtonElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-button': HTMLMwcButtonElement;
  }
  interface ElementTagNameMap {
    'mwc-button': HTMLMwcButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-button': JSXElements.MwcButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcButtonAttributes extends HTMLAttributes {
      'dense'?: boolean;
      'disabled'?: boolean;
      'href'?: string;
      'outlined'?: boolean;
      'raised'?: boolean;
      'ripple'?: boolean;
      'tag'?: string;
      'unelevated'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcCardActions {
      'fullBleed': boolean;
    }
  }

  interface HTMLMwcCardActionsElement extends StencilComponents.MwcCardActions, HTMLStencilElement {}

  var HTMLMwcCardActionsElement: {
    prototype: HTMLMwcCardActionsElement;
    new (): HTMLMwcCardActionsElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-card-actions': HTMLMwcCardActionsElement;
  }
  interface ElementTagNameMap {
    'mwc-card-actions': HTMLMwcCardActionsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-card-actions': JSXElements.MwcCardActionsAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcCardActionsAttributes extends HTMLAttributes {
      'fullBleed'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcCardButtons {

    }
  }

  interface HTMLMwcCardButtonsElement extends StencilComponents.MwcCardButtons, HTMLStencilElement {}

  var HTMLMwcCardButtonsElement: {
    prototype: HTMLMwcCardButtonsElement;
    new (): HTMLMwcCardButtonsElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-card-buttons': HTMLMwcCardButtonsElement;
  }
  interface ElementTagNameMap {
    'mwc-card-buttons': HTMLMwcCardButtonsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-card-buttons': JSXElements.MwcCardButtonsAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcCardButtonsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcCardMediaContent {

    }
  }

  interface HTMLMwcCardMediaContentElement extends StencilComponents.MwcCardMediaContent, HTMLStencilElement {}

  var HTMLMwcCardMediaContentElement: {
    prototype: HTMLMwcCardMediaContentElement;
    new (): HTMLMwcCardMediaContentElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-card-media-content': HTMLMwcCardMediaContentElement;
  }
  interface ElementTagNameMap {
    'mwc-card-media-content': HTMLMwcCardMediaContentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-card-media-content': JSXElements.MwcCardMediaContentAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcCardMediaContentAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcCardMedia {
      'sexteenByNine': boolean;
      'square': boolean;
    }
  }

  interface HTMLMwcCardMediaElement extends StencilComponents.MwcCardMedia, HTMLStencilElement {}

  var HTMLMwcCardMediaElement: {
    prototype: HTMLMwcCardMediaElement;
    new (): HTMLMwcCardMediaElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-card-media': HTMLMwcCardMediaElement;
  }
  interface ElementTagNameMap {
    'mwc-card-media': HTMLMwcCardMediaElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-card-media': JSXElements.MwcCardMediaAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcCardMediaAttributes extends HTMLAttributes {
      'sexteenByNine'?: boolean;
      'square'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcCardPrimaryAction {

    }
  }

  interface HTMLMwcCardPrimaryActionElement extends StencilComponents.MwcCardPrimaryAction, HTMLStencilElement {}

  var HTMLMwcCardPrimaryActionElement: {
    prototype: HTMLMwcCardPrimaryActionElement;
    new (): HTMLMwcCardPrimaryActionElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-card-primary-action': HTMLMwcCardPrimaryActionElement;
  }
  interface ElementTagNameMap {
    'mwc-card-primary-action': HTMLMwcCardPrimaryActionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-card-primary-action': JSXElements.MwcCardPrimaryActionAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcCardPrimaryActionAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcCard {
      'outlined': boolean;
    }
  }

  interface HTMLMwcCardElement extends StencilComponents.MwcCard, HTMLStencilElement {}

  var HTMLMwcCardElement: {
    prototype: HTMLMwcCardElement;
    new (): HTMLMwcCardElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-card': HTMLMwcCardElement;
  }
  interface ElementTagNameMap {
    'mwc-card': HTMLMwcCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-card': JSXElements.MwcCardAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcCardAttributes extends HTMLAttributes {
      'outlined'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcFab {
      'disabled': boolean;
      'exited': boolean;
      'href': string;
      'mini': boolean;
      'ripple': boolean;
      'tag': string;
    }
  }

  interface HTMLMwcFabElement extends StencilComponents.MwcFab, HTMLStencilElement {}

  var HTMLMwcFabElement: {
    prototype: HTMLMwcFabElement;
    new (): HTMLMwcFabElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-fab': HTMLMwcFabElement;
  }
  interface ElementTagNameMap {
    'mwc-fab': HTMLMwcFabElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-fab': JSXElements.MwcFabAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcFabAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'exited'?: boolean;
      'href'?: string;
      'mini'?: boolean;
      'ripple'?: boolean;
      'tag'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcIcon {
      'href': string;
      'name': string;
    }
  }

  interface HTMLMwcIconElement extends StencilComponents.MwcIcon, HTMLStencilElement {}

  var HTMLMwcIconElement: {
    prototype: HTMLMwcIconElement;
    new (): HTMLMwcIconElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-icon': HTMLMwcIconElement;
  }
  interface ElementTagNameMap {
    'mwc-icon': HTMLMwcIconElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-icon': JSXElements.MwcIconAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcIconAttributes extends HTMLAttributes {
      'href'?: string;
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcListDivider {

    }
  }

  interface HTMLMwcListDividerElement extends StencilComponents.MwcListDivider, HTMLStencilElement {}

  var HTMLMwcListDividerElement: {
    prototype: HTMLMwcListDividerElement;
    new (): HTMLMwcListDividerElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-list-divider': HTMLMwcListDividerElement;
  }
  interface ElementTagNameMap {
    'mwc-list-divider': HTMLMwcListDividerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-list-divider': JSXElements.MwcListDividerAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcListDividerAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcListGroupSubheader {

    }
  }

  interface HTMLMwcListGroupSubheaderElement extends StencilComponents.MwcListGroupSubheader, HTMLStencilElement {}

  var HTMLMwcListGroupSubheaderElement: {
    prototype: HTMLMwcListGroupSubheaderElement;
    new (): HTMLMwcListGroupSubheaderElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-list-group-subheader': HTMLMwcListGroupSubheaderElement;
  }
  interface ElementTagNameMap {
    'mwc-list-group-subheader': HTMLMwcListGroupSubheaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-list-group-subheader': JSXElements.MwcListGroupSubheaderAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcListGroupSubheaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcListGroup {

    }
  }

  interface HTMLMwcListGroupElement extends StencilComponents.MwcListGroup, HTMLStencilElement {}

  var HTMLMwcListGroupElement: {
    prototype: HTMLMwcListGroupElement;
    new (): HTMLMwcListGroupElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-list-group': HTMLMwcListGroupElement;
  }
  interface ElementTagNameMap {
    'mwc-list-group': HTMLMwcListGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-list-group': JSXElements.MwcListGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcListGroupAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcListItemText {
      'primary': boolean;
      'secondary': boolean;
    }
  }

  interface HTMLMwcListItemTextElement extends StencilComponents.MwcListItemText, HTMLStencilElement {}

  var HTMLMwcListItemTextElement: {
    prototype: HTMLMwcListItemTextElement;
    new (): HTMLMwcListItemTextElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-list-item-text': HTMLMwcListItemTextElement;
  }
  interface ElementTagNameMap {
    'mwc-list-item-text': HTMLMwcListItemTextElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-list-item-text': JSXElements.MwcListItemTextAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcListItemTextAttributes extends HTMLAttributes {
      'primary'?: boolean;
      'secondary'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcListItem {
      'activated': boolean;
      'href': string;
      'leadingIcon': string;
      'multiline': boolean;
      'ripple': boolean;
      'selected': boolean;
      'tag': string;
      'trailingIcon': string;
    }
  }

  interface HTMLMwcListItemElement extends StencilComponents.MwcListItem, HTMLStencilElement {}

  var HTMLMwcListItemElement: {
    prototype: HTMLMwcListItemElement;
    new (): HTMLMwcListItemElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-list-item': HTMLMwcListItemElement;
  }
  interface ElementTagNameMap {
    'mwc-list-item': HTMLMwcListItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-list-item': JSXElements.MwcListItemAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcListItemAttributes extends HTMLAttributes {
      'activated'?: boolean;
      'href'?: string;
      'leadingIcon'?: string;
      'multiline'?: boolean;
      'ripple'?: boolean;
      'selected'?: boolean;
      'tag'?: string;
      'trailingIcon'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcList {
      'dense': boolean;
    }
  }

  interface HTMLMwcListElement extends StencilComponents.MwcList, HTMLStencilElement {}

  var HTMLMwcListElement: {
    prototype: HTMLMwcListElement;
    new (): HTMLMwcListElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-list': HTMLMwcListElement;
  }
  interface ElementTagNameMap {
    'mwc-list': HTMLMwcListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-list': JSXElements.MwcListAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcListAttributes extends HTMLAttributes {
      'dense'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MwcTextField {
      'box': boolean;
      'dense': boolean;
      'disabled': boolean;
      'fullWidth': boolean;
      'helperText': string;
      'helperTextPersistent': boolean;
      'id': string;
      'label': string;
      'leadingIcon': string;
      'outlined': boolean;
      'placeholder': string;
      'ripple': boolean;
      'tag': string;
      'trailingIcon': string;
      'type': string;
    }
  }

  interface HTMLMwcTextFieldElement extends StencilComponents.MwcTextField, HTMLStencilElement {}

  var HTMLMwcTextFieldElement: {
    prototype: HTMLMwcTextFieldElement;
    new (): HTMLMwcTextFieldElement;
  };
  interface HTMLElementTagNameMap {
    'mwc-text-field': HTMLMwcTextFieldElement;
  }
  interface ElementTagNameMap {
    'mwc-text-field': HTMLMwcTextFieldElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mwc-text-field': JSXElements.MwcTextFieldAttributes;
    }
  }
  namespace JSXElements {
    export interface MwcTextFieldAttributes extends HTMLAttributes {
      'box'?: boolean;
      'dense'?: boolean;
      'disabled'?: boolean;
      'fullWidth'?: boolean;
      'helperText'?: string;
      'helperTextPersistent'?: boolean;
      'id'?: string;
      'label'?: string;
      'leadingIcon'?: string;
      'outlined'?: boolean;
      'placeholder'?: string;
      'ripple'?: boolean;
      'tag'?: string;
      'trailingIcon'?: string;
      'type'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;